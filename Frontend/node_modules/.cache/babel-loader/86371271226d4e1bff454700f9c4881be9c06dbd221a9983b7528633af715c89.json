{"ast":null,"code":"import axios from \"axios\";\nimport appConfig from \"../Utils/Config\";\nclass DataService {\n  async sendAndReceiveInitialPrompt(endpoint, data) {\n    try {\n      console.log(endpoint);\n      console.log(data);\n      const fastApiBaseUrl = \"http://localhost:3002\"; // FastAPI URL\n      const input = data; // Your input data\n\n      const url = `${fastApiBaseUrl}/${endpoint}`;\n      const response = await axios.get(url, {\n        params: {\n          input: data\n        },\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.status === 200) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return response.data;\n    } catch (error) {\n      console.error(\"Fetch error:\", error);\n      throw error;\n    }\n    //   const response = await axios.post(url);\n\n    //   const jsonData = { input: data };\n    //   const response = await fetch(`${appConfig.serverUrl}/${endpoint}`, {\n    //     method: \"POST\",\n    //     headers: {\n    //       \"Content-Type\": \"application/json\",\n    //     },\n    //     body: JSON.stringify(jsonData),\n    //   });\n    //   console.log(JSON.stringify(jsonData));\n\n    //   if (!response.ok) {\n    //     throw new Error(`HTTP error! Status: ${response.status}`);\n    //   }\n\n    //   return await response.json();\n    // } catch (error) {\n    //   console.error(\"Fetch error:\", error);\n    //   throw error;\n    // }\n  }\n\n  async askForMissingValues(endpoint, data) {\n    try {\n      const response = await fetch(`${appConfig.serverUrl}/${endpoint}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"Fetch error:\", error);\n      throw error;\n    }\n  }\n  async sendAndReceiveMissingValues(endpoint, data) {\n    try {\n      const response = await fetch(`${appConfig.serverUrl}/${endpoint}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"Fetch error:\", error);\n      throw error;\n    }\n  }\n}\nconst dataService = new DataService();\nexport default dataService;","map":{"version":3,"names":["axios","appConfig","DataService","sendAndReceiveInitialPrompt","endpoint","data","console","log","fastApiBaseUrl","input","url","response","get","params","headers","status","Error","error","askForMissingValues","fetch","serverUrl","method","body","JSON","stringify","ok","json","sendAndReceiveMissingValues","dataService"],"sources":["/Users/raniradzewsky/React/Interviews/Senseem/AI-Event-Planning/Frontend/src/Services/DataService.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport appConfig from \"../Utils/Config\";\r\n\r\nclass DataService {\r\n  async sendAndReceiveInitialPrompt<U>(\r\n    endpoint: string,\r\n    data: string\r\n  ): Promise<U> {\r\n    try {\r\n      console.log(endpoint);\r\n      console.log(data);\r\n\r\n      const fastApiBaseUrl = \"http://localhost:3002\"; // FastAPI URL\r\n      const input = data; // Your input data\r\n\r\n      const url = `${fastApiBaseUrl}/${endpoint}`;\r\n      const response = await axios.get(url, {\r\n        params: {\r\n          input: data,\r\n        },\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n  \r\n      if (!response.status === 200) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n  \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Fetch error:\", error);\r\n      throw error;\r\n    }\r\n    //   const response = await axios.post(url);\r\n \r\n      //   const jsonData = { input: data };\r\n      //   const response = await fetch(`${appConfig.serverUrl}/${endpoint}`, {\r\n      //     method: \"POST\",\r\n      //     headers: {\r\n      //       \"Content-Type\": \"application/json\",\r\n      //     },\r\n      //     body: JSON.stringify(jsonData),\r\n      //   });\r\n    //   console.log(JSON.stringify(jsonData));\r\n\r\n    //   if (!response.ok) {\r\n    //     throw new Error(`HTTP error! Status: ${response.status}`);\r\n    //   }\r\n\r\n    //   return await response.json();\r\n    // } catch (error) {\r\n    //   console.error(\"Fetch error:\", error);\r\n    //   throw error;\r\n    // }\r\n  }\r\n\r\n  async askForMissingValues<T, U>(endpoint: string, data: T): Promise<U> {\r\n    try {\r\n      const response = await fetch(`${appConfig.serverUrl}/${endpoint}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(\"Fetch error:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n  async sendAndReceiveMissingValues<T, U>(\r\n    endpoint: string,\r\n    data: T\r\n  ): Promise<U> {\r\n    try {\r\n      const response = await fetch(`${appConfig.serverUrl}/${endpoint}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(\"Fetch error:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nconst dataService = new DataService();\r\n\r\nexport default dataService;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,iBAAiB;AAEvC,MAAMC,WAAW,CAAC;EAChB,MAAMC,2BAA2B,CAC/BC,QAAgB,EAChBC,IAAY,EACA;IACZ,IAAI;MACFC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;MACrBE,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MAEjB,MAAMG,cAAc,GAAG,uBAAuB,CAAC,CAAC;MAChD,MAAMC,KAAK,GAAGJ,IAAI,CAAC,CAAC;;MAEpB,MAAMK,GAAG,GAAI,GAAEF,cAAe,IAAGJ,QAAS,EAAC;MAC3C,MAAMO,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAACF,GAAG,EAAE;QACpCG,MAAM,EAAE;UACNJ,KAAK,EAAEJ;QACT,CAAC;QACDS,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,IAAI,CAACH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;QAC5B,MAAM,IAAIC,KAAK,CAAE,uBAAsBL,QAAQ,CAACI,MAAO,EAAC,CAAC;MAC3D;MAEA,OAAOJ,QAAQ,CAACN,IAAI;IACtB,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdX,OAAO,CAACW,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAMA,KAAK;IACb;IACA;;IAEE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACF;;IAEA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;EACF;;EAEA,MAAMC,mBAAmB,CAAOd,QAAgB,EAAEC,IAAO,EAAc;IACrE,IAAI;MACF,MAAMM,QAAQ,GAAG,MAAMQ,KAAK,CAAE,GAAElB,SAAS,CAACmB,SAAU,IAAGhB,QAAS,EAAC,EAAE;QACjEiB,MAAM,EAAE,MAAM;QACdP,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACnB,IAAI;MAC3B,CAAC,CAAC;MAEF,IAAI,CAACM,QAAQ,CAACc,EAAE,EAAE;QAChB,MAAM,IAAIT,KAAK,CAAE,uBAAsBL,QAAQ,CAACI,MAAO,EAAC,CAAC;MAC3D;MAEA,OAAO,MAAMJ,QAAQ,CAACe,IAAI,EAAE;IAC9B,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdX,OAAO,CAACW,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAMA,KAAK;IACb;EACF;EACA,MAAMU,2BAA2B,CAC/BvB,QAAgB,EAChBC,IAAO,EACK;IACZ,IAAI;MACF,MAAMM,QAAQ,GAAG,MAAMQ,KAAK,CAAE,GAAElB,SAAS,CAACmB,SAAU,IAAGhB,QAAS,EAAC,EAAE;QACjEiB,MAAM,EAAE,MAAM;QACdP,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDQ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACnB,IAAI;MAC3B,CAAC,CAAC;MAEF,IAAI,CAACM,QAAQ,CAACc,EAAE,EAAE;QAChB,MAAM,IAAIT,KAAK,CAAE,uBAAsBL,QAAQ,CAACI,MAAO,EAAC,CAAC;MAC3D;MAEA,OAAO,MAAMJ,QAAQ,CAACe,IAAI,EAAE;IAC9B,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdX,OAAO,CAACW,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAMA,KAAK;IACb;EACF;AACF;AAEA,MAAMW,WAAW,GAAG,IAAI1B,WAAW,EAAE;AAErC,eAAe0B,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}