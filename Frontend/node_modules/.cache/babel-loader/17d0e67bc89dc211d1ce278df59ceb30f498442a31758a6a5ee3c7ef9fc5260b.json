{"ast":null,"code":"var _jsxFileName = \"/Users/raniradzewsky/React/Interviews/Senseem/AI-Event-Planning/Frontend/src/Components/HomeArea/SearchBar/SearchBar.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport dataService from \"../../../Services/DataService\";\nimport notifyService from \"../../../Services/NotifyService\";\nimport MarvinOutput from \"../MarvinOutput/MarvinOutput\";\nimport \"./SearchBar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SearchBar() {\n  _s();\n  const [neededUrl, setNeededUrl] = useState(\"\");\n  const [currentEvent, setCurrentEvent] = useState();\n  const [outputText, setOutputText] = useState(\"\");\n  const inputElement = document.getElementById(\"InputText\");\n  //   const outputElement = document.getElementById(\"AIOutput\") as HTMLDivElement;\n\n  function hasNullProperty(obj) {\n    console.log(\"checking for missing values...\");\n    console.log(obj);\n    for (const value of Object.values(obj)) {\n      if (value === null || value === \"unknown\") {\n        console.log(\"true\");\n        return true;\n      }\n    }\n    console.log(\"false\");\n    return false;\n  }\n  async function sendToBackend() {\n    try {\n      let updatedEvent;\n      if (!currentEvent) {\n        setNeededUrl(\"translate_prompt\");\n        const event = await dataService.sendAndReceiveInitialPrompt(neededUrl, inputElement.value.toString());\n        let event1 = event;\n        console.log(event1);\n        updatedEvent = event;\n        console.log(updatedEvent);\n\n        // If the event is missing values of the event model\n        if (hasNullProperty(updatedEvent)) {\n          // Update AI chat text...\n          setNeededUrl(\"ask_For_Blanks\");\n          setOutputText(await dataService.askForMissingValues(neededUrl, updatedEvent));\n        }\n\n        // Use updatedEvent instead of currentEvent\n        setCurrentEvent(updatedEvent);\n      }\n      if (updatedEvent && hasNullProperty(updatedEvent)) {\n        console.log(\"missing values...\");\n        setNeededUrl(\"fill_In_Blanks\");\n        // Use updatedEvent instead of currentEvent\n        updatedEvent = await dataService.sendAndReceiveMissingValues(neededUrl, inputElement.value);\n        setCurrentEvent(updatedEvent);\n      }\n      if (updatedEvent && !hasNullProperty(updatedEvent)) {\n        // Recommend places that fit the event values...\n        console.log(\"recommending...\");\n      }\n    } catch (err) {\n      notifyService.error(err);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"SearchBar\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"InputText\",\n      className: \"InputBox\",\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"SearchButton\",\n      onClick: () => sendToBackend(),\n      children: \"Help Me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MarvinOutput, {\n      text: outputText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(SearchBar, \"EreltlnIUbW+PW/uECG3jc9VN4A=\");\n_c = SearchBar;\nexport default SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["useState","dataService","notifyService","MarvinOutput","SearchBar","neededUrl","setNeededUrl","currentEvent","setCurrentEvent","outputText","setOutputText","inputElement","document","getElementById","hasNullProperty","obj","console","log","value","Object","values","sendToBackend","updatedEvent","event","sendAndReceiveInitialPrompt","toString","event1","askForMissingValues","sendAndReceiveMissingValues","err","error"],"sources":["/Users/raniradzewsky/React/Interviews/Senseem/AI-Event-Planning/Frontend/src/Components/HomeArea/SearchBar/SearchBar.tsx"],"sourcesContent":["import { eventNames } from \"process\";\nimport { useEffect, useState } from \"react\";\nimport EventModel from \"../../../Models/EventModel\";\nimport dataService from \"../../../Services/DataService\";\nimport notifyService from \"../../../Services/NotifyService\";\nimport MarvinOutput from \"../MarvinOutput/MarvinOutput\";\nimport \"./SearchBar.css\";\n\nfunction SearchBar(): JSX.Element {\n  const [neededUrl, setNeededUrl] = useState<string>(\"\");\n  const [currentEvent, setCurrentEvent] = useState<EventModel>();\n  const [outputText, setOutputText] = useState(\"\");\n  const inputElement = document.getElementById(\"InputText\") as HTMLInputElement;\n  //   const outputElement = document.getElementById(\"AIOutput\") as HTMLDivElement;\n\n  function hasNullProperty(obj: EventModel): boolean {\n    console.log(\"checking for missing values...\");\n    console.log(obj);\n\n    for (const value of Object.values(obj)) {\n      if (value === null || value === \"unknown\") {\n        console.log(\"true\");\n        return true;\n      }\n    }\n    console.log(\"false\");\n    return false;\n  }\n\n  async function sendToBackend() {\n    try {\n      let updatedEvent: EventModel;\n\n      if (!currentEvent) {\n        setNeededUrl(\"translate_prompt\");\n        const event: EventModel = await dataService.sendAndReceiveInitialPrompt(\n          neededUrl,\n          inputElement.value.toString()\n        );\n\n        let event1: EventModel = event;\n        console.log(event1);\n\n        updatedEvent = event;\n        console.log(updatedEvent);\n\n        // If the event is missing values of the event model\n        if (hasNullProperty(updatedEvent)) {\n          // Update AI chat text...\n          setNeededUrl(\"ask_For_Blanks\");\n          setOutputText(\n            await dataService.askForMissingValues(neededUrl, updatedEvent)\n          );\n        }\n\n        // Use updatedEvent instead of currentEvent\n        setCurrentEvent(updatedEvent);\n      }\n\n      if (updatedEvent && hasNullProperty(updatedEvent)) {\n        console.log(\"missing values...\");\n\n        setNeededUrl(\"fill_In_Blanks\");\n        // Use updatedEvent instead of currentEvent\n        updatedEvent = await dataService.sendAndReceiveMissingValues(\n          neededUrl,\n          inputElement.value\n        );\n\n        setCurrentEvent(updatedEvent);\n      }\n\n      if (updatedEvent && !hasNullProperty(updatedEvent)) {\n        // Recommend places that fit the event values...\n        console.log(\"recommending...\");\n      }\n    } catch (err: any) {\n      notifyService.error(err);\n    }\n  }\n\n  return (\n    <div className=\"SearchBar\">\n      {/* search bar and enter: */}\n      <input id=\"InputText\" className=\"InputBox\" type=\"text\"></input>\n      <br />\n      <button className=\"SearchButton\" onClick={() => sendToBackend()}>\n        Help Me\n      </button>\n      <MarvinOutput text={outputText} />\n    </div>\n  );\n}\n\nexport default SearchBar;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}