{"ast":null,"code":"import axios from \"axios\";\nimport appConfig from \"../Utils/Config\";\nclass DataService {\n  async sendAndReceiveInitialPrompt(endpoint, data) {\n    async function sendPostRequestWithQueryParams() {\n      try {\n        const apiUrl = 'http://example.com/api/${}';\n        const queryParams = {\n          param1: 'value1',\n          param2: 'value2'\n        };\n        const response = await axios.post(apiUrl, null, {\n          params: queryParams\n        });\n        if (response.status === 200) {\n          console.log('POST request with query parameters was successful');\n          console.log(response.data);\n        } else {\n          console.error(`HTTP error! Status: ${response.status}`);\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n    sendPostRequestWithQueryParams();\n    // try {\n    //   console.log(endpoint);\n    //   console.log(data);\n\n    //   const response = await fetch(`${appConfig.serverUrl}/${endpoint}`, {\n    //     method: \"POST\",\n    //     headers: {\n    //       \"Content-Type\": \"application/json\",\n    //     },\n    //     body: JSON.stringify(data),\n    //   });\n\n    //   if (!response.ok) {\n    //     throw new Error(`HTTP error! Status: ${response.status}`);\n    //   }\n\n    //   return await response.json();\n    // } catch (error) {\n    //   console.error(\"Fetch error:\", error);\n    //   throw error;\n    // }\n  }\n\n  async askForMissingValues(endpoint, data) {\n    try {\n      const response = await fetch(`${appConfig.serverUrl}/${endpoint}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"Fetch error:\", error);\n      throw error;\n    }\n  }\n  async sendAndReceiveMissingValues(endpoint, data) {\n    try {\n      const response = await fetch(`${appConfig.serverUrl}/${endpoint}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"Fetch error:\", error);\n      throw error;\n    }\n  }\n}\nconst dataService = new DataService();\nexport default dataService;","map":{"version":3,"names":["axios","appConfig","DataService","sendAndReceiveInitialPrompt","endpoint","data","sendPostRequestWithQueryParams","apiUrl","queryParams","param1","param2","response","post","params","status","console","log","error","askForMissingValues","fetch","serverUrl","method","headers","body","JSON","stringify","ok","Error","json","sendAndReceiveMissingValues","dataService"],"sources":["/Users/raniradzewsky/React/Interviews/Senseem/AI-Event-Planning/Frontend/src/Services/DataService.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport appConfig from \"../Utils/Config\";\r\n\r\nclass DataService {\r\n  async sendAndReceiveInitialPrompt<T, U>(\r\n    endpoint: string,\r\n    data: T\r\n  ): Promise<U> {\r\n    async function sendPostRequestWithQueryParams() {\r\n        try {\r\n          const apiUrl = 'http://example.com/api/${}';\r\n      \r\n          const queryParams = {\r\n            param1: 'value1',\r\n            param2: 'value2',\r\n          };\r\n      \r\n          const response = await axios.post(apiUrl, null, { params: queryParams });\r\n      \r\n          if (response.status === 200) {\r\n            console.log('POST request with query parameters was successful');\r\n            console.log(response.data);\r\n          } else {\r\n            console.error(`HTTP error! Status: ${response.status}`);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error:', error);\r\n        }\r\n      }\r\n      \r\n      sendPostRequestWithQueryParams();\r\n    // try {\r\n    //   console.log(endpoint);\r\n    //   console.log(data);\r\n\r\n    //   const response = await fetch(`${appConfig.serverUrl}/${endpoint}`, {\r\n    //     method: \"POST\",\r\n    //     headers: {\r\n    //       \"Content-Type\": \"application/json\",\r\n    //     },\r\n    //     body: JSON.stringify(data),\r\n    //   });\r\n\r\n    //   if (!response.ok) {\r\n    //     throw new Error(`HTTP error! Status: ${response.status}`);\r\n    //   }\r\n\r\n    //   return await response.json();\r\n    // } catch (error) {\r\n    //   console.error(\"Fetch error:\", error);\r\n    //   throw error;\r\n    // }\r\n  }\r\n\r\n  async askForMissingValues<T, U>(endpoint: string, data: T): Promise<U> {\r\n    try {\r\n      const response = await fetch(`${appConfig.serverUrl}/${endpoint}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(\"Fetch error:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n  async sendAndReceiveMissingValues<T, U>(\r\n    endpoint: string,\r\n    data: T\r\n  ): Promise<U> {\r\n    try {\r\n      const response = await fetch(`${appConfig.serverUrl}/${endpoint}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(\"Fetch error:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nconst dataService = new DataService();\r\n\r\nexport default dataService;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,iBAAiB;AAEvC,MAAMC,WAAW,CAAC;EAChB,MAAMC,2BAA2B,CAC/BC,QAAgB,EAChBC,IAAO,EACK;IACZ,eAAeC,8BAA8B,GAAG;MAC5C,IAAI;QACF,MAAMC,MAAM,GAAG,4BAA4B;QAE3C,MAAMC,WAAW,GAAG;UAClBC,MAAM,EAAE,QAAQ;UAChBC,MAAM,EAAE;QACV,CAAC;QAED,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAACL,MAAM,EAAE,IAAI,EAAE;UAAEM,MAAM,EAAEL;QAAY,CAAC,CAAC;QAExE,IAAIG,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;UAC3BC,OAAO,CAACC,GAAG,CAAC,mDAAmD,CAAC;UAChED,OAAO,CAACC,GAAG,CAACL,QAAQ,CAACN,IAAI,CAAC;QAC5B,CAAC,MAAM;UACLU,OAAO,CAACE,KAAK,CAAE,uBAAsBN,QAAQ,CAACG,MAAO,EAAC,CAAC;QACzD;MACF,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAChC;IACF;IAEAX,8BAA8B,EAAE;IAClC;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;EACF;;EAEA,MAAMY,mBAAmB,CAAOd,QAAgB,EAAEC,IAAO,EAAc;IACrE,IAAI;MACF,MAAMM,QAAQ,GAAG,MAAMQ,KAAK,CAAE,GAAElB,SAAS,CAACmB,SAAU,IAAGhB,QAAS,EAAC,EAAE;QACjEiB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACpB,IAAI;MAC3B,CAAC,CAAC;MAEF,IAAI,CAACM,QAAQ,CAACe,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBhB,QAAQ,CAACG,MAAO,EAAC,CAAC;MAC3D;MAEA,OAAO,MAAMH,QAAQ,CAACiB,IAAI,EAAE;IAC9B,CAAC,CAAC,OAAOX,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAMA,KAAK;IACb;EACF;EACA,MAAMY,2BAA2B,CAC/BzB,QAAgB,EAChBC,IAAO,EACK;IACZ,IAAI;MACF,MAAMM,QAAQ,GAAG,MAAMQ,KAAK,CAAE,GAAElB,SAAS,CAACmB,SAAU,IAAGhB,QAAS,EAAC,EAAE;QACjEiB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACpB,IAAI;MAC3B,CAAC,CAAC;MAEF,IAAI,CAACM,QAAQ,CAACe,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBhB,QAAQ,CAACG,MAAO,EAAC,CAAC;MAC3D;MAEA,OAAO,MAAMH,QAAQ,CAACiB,IAAI,EAAE;IAC9B,CAAC,CAAC,OAAOX,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAMA,KAAK;IACb;EACF;AACF;AAEA,MAAMa,WAAW,GAAG,IAAI5B,WAAW,EAAE;AAErC,eAAe4B,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}