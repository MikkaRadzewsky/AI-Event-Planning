{"ast":null,"code":"import appConfig from \"../Utils/Config\";\nclass DataService {\n  async sendAndReceiveInitialPrompt(endpoint, data) {\n    try {\n      const jsonData = {\n        input: data\n      };\n      const response = await fetch(`${appConfig.serverUrl}/${endpoint}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(jsonData)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"Fetch error:\", error);\n      throw error;\n    }\n  }\n  async askForMissingValues(endpoint, data) {\n    try {\n      const jsonData = {\n        input: data\n      };\n      const response = await fetch(`${appConfig.serverUrl}/${endpoint}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(jsonData)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"Fetch error:\", error);\n      throw error;\n    }\n  }\n  async sendAndReceiveMissingValues(endpoint, data) {\n    try {\n      const response = await fetch(`${appConfig.serverUrl}/${endpoint}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"Fetch error:\", error);\n      throw error;\n    }\n  }\n}\nconst dataService = new DataService();\nexport default dataService;","map":{"version":3,"names":["appConfig","DataService","sendAndReceiveInitialPrompt","endpoint","data","jsonData","input","response","fetch","serverUrl","method","headers","body","JSON","stringify","ok","Error","status","json","error","console","askForMissingValues","sendAndReceiveMissingValues","dataService"],"sources":["/Users/raniradzewsky/React/Interviews/Senseem/AI-Event-Planning/Frontend/src/Services/DataService.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport appConfig from \"../Utils/Config\";\r\n\r\nclass DataService {\r\n  async sendAndReceiveInitialPrompt<T, U>(\r\n    endpoint: string,\r\n    data: T\r\n  ): Promise<U> {\r\n    try {\r\n      const jsonData = { input: data };\r\n      const response = await fetch(`${appConfig.serverUrl}/${endpoint}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(jsonData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(\"Fetch error:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async askForMissingValues<T, U>(endpoint: string, data: T): Promise<U> {\r\n    try {\r\n      const jsonData = { input: data };\r\n      const response = await fetch(`${appConfig.serverUrl}/${endpoint}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(jsonData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(\"Fetch error:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async sendAndReceiveMissingValues<T, U>(\r\n    endpoint: string,\r\n    data: T\r\n  ): Promise<U> {\r\n    try {\r\n      const response = await fetch(`${appConfig.serverUrl}/${endpoint}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(\"Fetch error:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nconst dataService = new DataService();\r\n\r\nexport default dataService;\r\n"],"mappings":"AACA,OAAOA,SAAS,MAAM,iBAAiB;AAEvC,MAAMC,WAAW,CAAC;EAChB,MAAMC,2BAA2B,CAC/BC,QAAgB,EAChBC,IAAO,EACK;IACZ,IAAI;MACF,MAAMC,QAAQ,GAAG;QAAEC,KAAK,EAAEF;MAAK,CAAC;MAChC,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAER,SAAS,CAACS,SAAU,IAAGN,QAAS,EAAC,EAAE;QACjEO,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,QAAQ;MAC/B,CAAC,CAAC;MAEF,IAAI,CAACE,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBT,QAAQ,CAACU,MAAO,EAAC,CAAC;MAC3D;MAEA,OAAO,MAAMV,QAAQ,CAACW,IAAI,EAAE;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAMA,KAAK;IACb;EACF;EAEA,MAAME,mBAAmB,CAAOlB,QAAgB,EAAEC,IAAO,EAAc;IACrE,IAAI;MACF,MAAMC,QAAQ,GAAG;QAAEC,KAAK,EAAEF;MAAK,CAAC;MAChC,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAER,SAAS,CAACS,SAAU,IAAGN,QAAS,EAAC,EAAE;QACjEO,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,QAAQ;MAC/B,CAAC,CAAC;MAEF,IAAI,CAACE,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBT,QAAQ,CAACU,MAAO,EAAC,CAAC;MAC3D;MAEA,OAAO,MAAMV,QAAQ,CAACW,IAAI,EAAE;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAMA,KAAK;IACb;EACF;EAEA,MAAMG,2BAA2B,CAC/BnB,QAAgB,EAChBC,IAAO,EACK;IACZ,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAER,SAAS,CAACS,SAAU,IAAGN,QAAS,EAAC,EAAE;QACjEO,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,IAAI;MAC3B,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBT,QAAQ,CAACU,MAAO,EAAC,CAAC;MAC3D;MAEA,OAAO,MAAMV,QAAQ,CAACW,IAAI,EAAE;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAMA,KAAK;IACb;EACF;AACF;AAEA,MAAMI,WAAW,GAAG,IAAItB,WAAW,EAAE;AAErC,eAAesB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}