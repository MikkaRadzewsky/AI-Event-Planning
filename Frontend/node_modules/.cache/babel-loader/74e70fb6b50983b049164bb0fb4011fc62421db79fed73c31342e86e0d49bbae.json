{"ast":null,"code":"import axios from \"axios\";\nimport appConfig from \"../Utils/Config\";\nclass DataService {\n  async sendAndReceiveInitialPrompt(endpoint, data) {\n    try {\n      const apiUrl = `http://localhost:3001/api/${endpoint}`;\n      const queryParams = {\n        params: data\n      };\n      const response = await axios.post(apiUrl, null, {\n        params: queryParams\n      });\n\n      //   if (response.status === 200) {\n      //     console.log(\"POST request with query parameters was successful\");\n      //     console.log(response.data);\n      //   } else {\n      //     console.error(`HTTP error! Status: ${response.status}`);\n      //   }\n      return response;\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  }\n  // try {\n  //   console.log(endpoint);\n  //   console.log(data);\n\n  //   const response = await fetch(`${appConfig.serverUrl}/${endpoint}`, {\n  //     method: \"POST\",\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //     },\n  //     body: JSON.stringify(data),\n  //   });\n\n  //   if (!response.ok) {\n  //     throw new Error(`HTTP error! Status: ${response.status}`);\n  //   }\n\n  //   return await response.json();\n  // } catch (error) {\n  //   console.error(\"Fetch error:\", error);\n  //   throw error;\n  // }\n\n  async askForMissingValues(endpoint, data) {\n    try {\n      const response = await fetch(`${appConfig.serverUrl}/${endpoint}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"Fetch error:\", error);\n      throw error;\n    }\n  }\n  async sendAndReceiveMissingValues(endpoint, data) {\n    try {\n      const response = await fetch(`${appConfig.serverUrl}/${endpoint}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"Fetch error:\", error);\n      throw error;\n    }\n  }\n}\nconst dataService = new DataService();\nexport default dataService;","map":{"version":3,"names":["axios","appConfig","DataService","sendAndReceiveInitialPrompt","endpoint","data","apiUrl","queryParams","params","response","post","error","console","askForMissingValues","fetch","serverUrl","method","headers","body","JSON","stringify","ok","Error","status","json","sendAndReceiveMissingValues","dataService"],"sources":["/Users/raniradzewsky/React/Interviews/Senseem/AI-Event-Planning/Frontend/src/Services/DataService.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport EventModel from \"../Models/EventModel\";\r\nimport appConfig from \"../Utils/Config\";\r\n\r\nclass DataService {\r\n  async sendAndReceiveInitialPrompt<U>(\r\n    endpoint: string,\r\n    data: string\r\n  ): Promise<EventModel> {\r\n    try {\r\n      const apiUrl = `http://localhost:3001/api/${endpoint}`;\r\n\r\n      const queryParams = {\r\n        params: data,\r\n      };\r\n\r\n      const response: EventModel = await axios.post(apiUrl, null, {\r\n        params: queryParams,\r\n      });\r\n\r\n      //   if (response.status === 200) {\r\n      //     console.log(\"POST request with query parameters was successful\");\r\n      //     console.log(response.data);\r\n      //   } else {\r\n      //     console.error(`HTTP error! Status: ${response.status}`);\r\n      //   }\r\n      return response;\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n    }\r\n  }\r\n  // try {\r\n  //   console.log(endpoint);\r\n  //   console.log(data);\r\n\r\n  //   const response = await fetch(`${appConfig.serverUrl}/${endpoint}`, {\r\n  //     method: \"POST\",\r\n  //     headers: {\r\n  //       \"Content-Type\": \"application/json\",\r\n  //     },\r\n  //     body: JSON.stringify(data),\r\n  //   });\r\n\r\n  //   if (!response.ok) {\r\n  //     throw new Error(`HTTP error! Status: ${response.status}`);\r\n  //   }\r\n\r\n  //   return await response.json();\r\n  // } catch (error) {\r\n  //   console.error(\"Fetch error:\", error);\r\n  //   throw error;\r\n  // }\r\n\r\n  async askForMissingValues<T, U>(endpoint: string, data: T): Promise<U> {\r\n    try {\r\n      const response = await fetch(`${appConfig.serverUrl}/${endpoint}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(\"Fetch error:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n  async sendAndReceiveMissingValues<T, U>(\r\n    endpoint: string,\r\n    data: T\r\n  ): Promise<U> {\r\n    try {\r\n      const response = await fetch(`${appConfig.serverUrl}/${endpoint}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(\"Fetch error:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nconst dataService = new DataService();\r\n\r\nexport default dataService;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAOC,SAAS,MAAM,iBAAiB;AAEvC,MAAMC,WAAW,CAAC;EAChB,MAAMC,2BAA2B,CAC/BC,QAAgB,EAChBC,IAAY,EACS;IACrB,IAAI;MACF,MAAMC,MAAM,GAAI,6BAA4BF,QAAS,EAAC;MAEtD,MAAMG,WAAW,GAAG;QAClBC,MAAM,EAAEH;MACV,CAAC;MAED,MAAMI,QAAoB,GAAG,MAAMT,KAAK,CAACU,IAAI,CAACJ,MAAM,EAAE,IAAI,EAAE;QAC1DE,MAAM,EAAED;MACV,CAAC,CAAC;;MAEF;MACA;MACA;MACA;MACA;MACA;MACA,OAAOE,QAAQ;IACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC;EACF;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA,MAAME,mBAAmB,CAAOT,QAAgB,EAAEC,IAAO,EAAc;IACrE,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMK,KAAK,CAAE,GAAEb,SAAS,CAACc,SAAU,IAAGX,QAAS,EAAC,EAAE;QACjEY,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACf,IAAI;MAC3B,CAAC,CAAC;MAEF,IAAI,CAACI,QAAQ,CAACY,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBb,QAAQ,CAACc,MAAO,EAAC,CAAC;MAC3D;MAEA,OAAO,MAAMd,QAAQ,CAACe,IAAI,EAAE;IAC9B,CAAC,CAAC,OAAOb,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAMA,KAAK;IACb;EACF;EACA,MAAMc,2BAA2B,CAC/BrB,QAAgB,EAChBC,IAAO,EACK;IACZ,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMK,KAAK,CAAE,GAAEb,SAAS,CAACc,SAAU,IAAGX,QAAS,EAAC,EAAE;QACjEY,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACf,IAAI;MAC3B,CAAC,CAAC;MAEF,IAAI,CAACI,QAAQ,CAACY,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBb,QAAQ,CAACc,MAAO,EAAC,CAAC;MAC3D;MAEA,OAAO,MAAMd,QAAQ,CAACe,IAAI,EAAE;IAC9B,CAAC,CAAC,OAAOb,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAMA,KAAK;IACb;EACF;AACF;AAEA,MAAMe,WAAW,GAAG,IAAIxB,WAAW,EAAE;AAErC,eAAewB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}